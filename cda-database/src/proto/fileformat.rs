/*
 * Copyright (c) 2025 The Contributors to Eclipse OpenSOVD (see CONTRIBUTORS)
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Encryption {
    #[prost(string, tag = "1")]
    pub encryption_algorithm: ::prost::alloc::string::String,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub key_identifier: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chunk {
    /// Defines the type of chunk data
    #[prost(enumeration = "chunk::DataType", tag = "1")]
    pub r#type: i32,
    /// Name of the chunk (could be a filename)
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// metadata for this chunk
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// signatures of the data
    #[prost(message, repeated, tag = "4")]
    pub signatures: ::prost::alloc::vec::Vec<Signature>,
    /// algorithm name for any compression applied to data
    #[prost(string, optional, tag = "5")]
    pub compression_algorithm: ::core::option::Option<::prost::alloc::string::String>,
    /// uncompressed size - could be used to allocate memory / stop if size exceeds some maximum
    /// required if a compression algorithm is set
    #[prost(uint64, optional, tag = "6")]
    pub uncompressed_size: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "7")]
    pub encryption: ::core::option::Option<Encryption>,
    /// mime type of the (uncompressed) content (optional, missing means application/octet-stream)
    #[prost(string, optional, tag = "9")]
    pub mime_type: ::core::option::Option<::prost::alloc::string::String>,
    /// chunk data - optional in case the metadata is the actual data for this chunk
    #[prost(bytes = "vec", optional, tag = "8")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Nested message and enum types in `Chunk`.
pub mod chunk {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DataType {
        DiagnosticDescription = 0,
        /// A JAR file associated with the diagnostic description, may be referenced by single ecu jobs, and data from them might be needed in the CDA
        JarFile = 1,
        /// Files included in a jar-file. name of chunk is: "<jar-file>::<path-in-jar>"
        JarFilePartial = 2,
        /// file that gets embedded, could be an embedded odx-f, or a binary flashware, when the format is used for flashing
        EmbeddedFile = 3,
        /// ids until 1024 are reserved for future usages
        VendorSpecific = 1024,
    }
    impl DataType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::DiagnosticDescription => "DIAGNOSTIC_DESCRIPTION",
                Self::JarFile => "JAR_FILE",
                Self::JarFilePartial => "JAR_FILE_PARTIAL",
                Self::EmbeddedFile => "EMBEDDED_FILE",
                Self::VendorSpecific => "VENDOR_SPECIFIC",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DIAGNOSTIC_DESCRIPTION" => Some(Self::DiagnosticDescription),
                "JAR_FILE" => Some(Self::JarFile),
                "JAR_FILE_PARTIAL" => Some(Self::JarFilePartial),
                "EMBEDDED_FILE" => Some(Self::EmbeddedFile),
                "VENDOR_SPECIFIC" => Some(Self::VendorSpecific),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Signature {
    /// used signature algorithm, just a string since the handling in the CDA can be dynamic through a plugin
    #[prost(string, tag = "1")]
    pub algorithm: ::prost::alloc::string::String,
    /// key identifier to identify the key used for the signature - this allows you to add multiple signatures (e.g. dev and prod)
    #[prost(bytes = "vec", optional, tag = "2")]
    pub key_identifier: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// additional metadata for misc. purposes
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// actual signature data
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MddFile {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(enumeration = "mdd_file::FeatureFlag", repeated, tag = "2")]
    pub feature_flags: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag = "3")]
    pub ecu_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub revision: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "5")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, repeated, tag = "6")]
    pub chunks: ::prost::alloc::vec::Vec<Chunk>,
    /// Instead of individually signing each chunk, you sign all of them together
    #[prost(message, optional, tag = "7")]
    pub chunks_signature: ::core::option::Option<Signature>,
}
/// Nested message and enum types in `MDDFile`.
pub mod mdd_file {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum FeatureFlag {
        /// Not used yet
        Reserved = 0,
    }
    impl FeatureFlag {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Reserved => "RESERVED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RESERVED" => Some(Self::Reserved),
                _ => None,
            }
        }
    }
}
